{"version":3,"sources":["modules/GraphViz/engagement_edge/getEngagementEdge.tsx","Login.tsx","modules/GraphViz/calculations/node/nodeCalcs.tsx","modules/GraphViz/calculations/link/linkCalcs.tsx","modules/GraphViz/graphColoring/coloring.tsx","modules/GraphViz/graph/graph_traverse.tsx","modules/GraphViz/graphQL/expandScope.tsx","modules/GraphViz/graph/mergeGraphs.tsx","modules/GraphViz/graphQL/graphQLAdjacencyMatrix.tsx","modules/GraphViz/graph/labels.tsx","components/GraphViz.tsx","components/NodeTable.tsx","components/SideBarContent.tsx","components/SideBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getGraphQlEdge","window","location","hostname","engagement_edge","checkLogin","a","fetch","method","credentials","res","json","body","LogIn","props","className","initialValues","userName","password","onSubmit","values","sha256WithPepper","login","loginSuccess","console","log","warn","name","type","placeholder","sha256","message","msgBuffer","TextEncoder","encode","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join","username","hashed","i","JSON","stringify","headers","calcNodeRiskPercentile","_nodeRisk","_allRisks","nodeRisk","risk","allRisks","n","sort","undefined","length","riskIndex","Math","floor","findNode","id","nodes","node","calcLinkRiskPercentile","link","Graph","linkRisk","srcNode","source","dstNode","target","error","srcRisk","dstRisk","round","calcLinkRisk","BKDRHash","str","hash","MAX_SAFE_INTEGER","parseInt","charCodeAt","calcNodeRgb","colorHash","nodeType","rgb","percentToColor","percentile","calcLinkColor","mapGraph","f","visited","Set","mapEdgeProps","edgeName","neighbor","_mapGraph","has","uid","add","mapEdges","prop","Object","prototype","hasOwnProperty","call","maybeNeighbor","isArray","graphql_edge","builtins","unpackPluginNodes","predicates","edge_name","dgraph_type","pluginNode","keys","forEach","key","retrieveGraph","lens","query","expandScope","then","data","lens_scope","lensWithScope","scope","lensName","mergeNodes","x","y","merged","mapNodeProps","mergeGraphs","curGraph","update","links","outputGraph","updated","Map","set","newNode","get","label","newLink","newLinkSource","newLinkTarget","getNodeType","t","node_type","randomInt","min","max","random","graphQLAdjacencyMatrix","inputGraph","nodeMap","traverseNeighbors","callback","fromNode","toNode","push","traverseNodes","_","nodeLabel","_node","process_name","process_id","file_path","external_ip","getNodeLabel","strippedNode","analyzer_names","risks","risk_score","analyzer_name","edge","vizNode","HSL2RGB","H","S","L","q","p","color","o","ColorHash","options","hsl","hueRanges","range","apply","LS","lightness","saturation","param","concat","this","hue","updateGraph","state","setState","mergeUpdate","graphData","curLensName","catch","e","GraphDisplay","setCurNode","React","useState","defaultGraphDisplayState","forceRef","useRef","useEffect","current","d3Force","d3","abs","vx","vy","interval","setInterval","clearInterval","enableNodeDrag","linkDirectionalParticles","linkDirectionalParticleWidth","linkRiskPercentile","calcLinkParticleWidth","linkDirectionalParticleColor","linkDirectionalParticleSpeed","onNodeClick","event","linkDirectionalArrowLength","linkWidth","linkDirectionalArrowRelPos","riskPercentile","calcLinkDirectionalArrowRelPos","linkCanvasObjectMode","linkCanvasObject","ctx","start","end","textPos","assign","c","relLink","maxTextLength","sqrt","pow","LABEL_NODE_MARGIN","textAngle","atan2","PI","mapLabel","font","fontSize","measureText","width","textWidth","bckgDimensions","save","translate","rotate","fillStyle","fillRect","textAlign","textBaseline","fillText","restore","nodeCanvasObject","globalScale","NODE_R","nodeSize","beginPath","arc","nodeColors","riskColor","fill","nodeRbg","ref","useStyles","makeStyles","root","table","minWidth","tableHeader","NodeTable","classes","hidden","_neighbor","displayNode","propName","includes","Date","toLocaleString","TableContainer","Table","styles","TableHead","TableRow","TableCell","align","innerTable","TableBody","entries","entry","value","button","backgroundColor","title","icon","margin","expand","header","display","SelectLens","component","Button","onClick","setLens","score","ToggleLensTable","toggled","lenses","getLenses","response","aria-label","Number","lens_name","Divider","errors","jres","NodeDetails","ToggleNodeTable","curNode","toggle","SideBarContent","theme","createStyles","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","close","SideBar","curLens","open","setOpen","AppBar","position","clsx","Toolbar","IconButton","Typography","variant","noWrap","Drawer","anchor","paper","paragraph","EngagementUx","redirectTo","routeState","setRouteState","page_name","curPage","localStorage","setItem","Router","getItem","lastCheckLoginCheck","now","loggedIn","App","Boolean","match","darkTheme","createMuiTheme","palette","primary","main","rootElement","document","getElementById","ReactDOM","render","StrictMode","ThemeProvider","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAKaA,EAAiB,WAC1B,MAAO,UAAUC,OAAOC,SAASC,SAAS,UCAxCC,EDLK,UAAUH,OAAOC,SAASC,SAAS,SCOjCE,EAAU,uCAAG,8BAAAC,EAAA,sEACJC,MAAM,GAAD,OAAIH,EAAJ,cAAiC,CACpDI,OAAQ,MACRC,YAAa,YAHK,cAChBC,EADgB,gBAMHA,EAAIC,OAND,cAMhBC,EANgB,yBAQK,SAApBA,EAAI,SARW,2CAAH,qDAWVC,EAAQ,SAACC,GACpB,OACE,yBAAKC,UAAY,mBACf,yBAAKA,UAAU,SAAf,WACA,yBAAKA,UAAY,iBACjB,kBAAC,IAAD,CACEC,cAAe,CAAEC,SAAU,GAAIC,SAAU,IACzCC,SAAQ,uCAAE,WAAMC,GAAN,eAAAd,EAAA,sEACee,EACrBD,EAAOH,SAAUG,EAAOF,UAFlB,OACFA,EADE,OAKaI,EAAMF,EAAOH,SAAUC,IAG1CJ,EAAMS,eACNC,QAAQC,IAAI,cAEZD,QAAQE,KAAK,iBAXP,2CAAF,uDAeR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,OAAOC,YAAY,aADjD,IAC+D,6BAC7D,kBAAC,IAAD,CAAOF,KAAK,WAAWC,KAAK,WAAWC,YAAY,aAFrD,IAEkE,6BAChE,4BAAQd,UAAU,aAAca,KAAK,UAArC,e,SASKE,E,8EAAf,WAAsBC,GAAtB,mBAAAzB,EAAA,6DAEQ0B,GAAY,IAAIC,aAAcC,OAAOH,GAF7C,SAK2BI,OAAOC,OAAOC,OAAO,UAAWL,GAL3D,cAKQM,EALR,OAQQC,EAAYC,MAAMC,KAAK,IAAIC,WAAWJ,IAR9C,kBAWSC,EAAUI,KAAI,SAAAC,GAAC,OAAK,KAAOA,EAAEC,SAAS,KAAKC,OAAO,MAAIC,KAAK,KAXpE,4C,sBAeA,IAAM1B,EAAgB,uCAAG,WAAO2B,EAAkB9B,GAAzB,iBAAAZ,EAAA,4DAIR,mEAJQ,SAKJwB,EAAOZ,EADX,mEAC+B8B,GALvB,OAKnBC,EALmB,OAOdC,EAAI,EAPU,YAOPA,EAAI,KAPG,iCAQJpB,EAAOmB,GARH,OAQnBA,EARmB,cAOGC,IAPH,gDAUhBD,GAVgB,4CAAH,wDAahB3B,EAAK,uCAAG,WAAO0B,EAAkB9B,GAAzB,iBAAAZ,EAAA,+EAEcC,MAAM,GAAD,OAAIH,EAAJ,SAA4B,CAC/CI,OAAQ,OACRI,KAAMuC,KAAKC,UAAU,CACjB,SAAYJ,EACZ,SAAY9B,IAEhBmC,QAAS,CACL,eAAgB,oBAEpB5C,YAAa,YAXb,cAEEC,EAFF,gBAceA,EAAIC,OAdnB,cAcEC,EAdF,yBAeuB,SAApBA,EAAI,SAfP,yCAiBJY,QAAQC,IAAR,MAjBI,mBAkBG,GAlBH,0DAAH,wD,gDC/EE6B,EAAyB,SAACC,EAAoCC,GACvE,IAAIC,EAAWF,EACU,kBAAdA,IACPE,EAAWF,EAAUG,MAGzB,IAAMC,EAAWH,EACZb,KAAI,SAACiB,GAAD,OAAYA,GAAK,KACrBC,MAAK,SAACvD,EAAWsC,GAAZ,OAA0BtC,EAAIsC,KAExC,QAAiBkB,IAAbL,GAAuC,IAAbA,GAAsC,IAApBE,EAASI,OACrD,OAAO,EAGX,IAd0F,EActFC,EAAY,EAd0E,cAevEL,GAfuE,IAe1F,2BAA6B,CACrBF,GADqB,UAErBO,GAAa,IAjBqE,8BAqB1F,OAAOC,KAAKC,MAAOF,EAAYL,EAASI,OAAU,MCnBhDI,EAAW,SAACC,EAAYC,GAAsB,IAAD,gBAC3BA,GAAS,IADkB,IAC/C,2BAAkC,CAAC,IAAxBC,EAAuB,QAC9B,GAAIA,EAAKF,KAAOA,EACZ,OAAOE,GAHgC,8BAM/C,OAAO,MAiDEC,EAAyB,SAACC,EAAgBC,GACnD,IAAMC,EA/CkB,SAACF,EAAgBC,GAEzC,IAAIE,EAEAR,EAASK,EAAKI,OAAOjD,KAAM8C,EAAMJ,OACjCQ,EAEAV,EAASK,EAAKM,OAAOnD,KAAM8C,EAAMJ,OAErC,IAAKM,IAAYE,EAEb,OADArD,QAAQuD,MAAM,0BAA2BJ,EAASH,EAAMK,GACjD,EAGX,IAAMG,EAAUL,EAAQjB,MAAQ,EAC1BuB,EAAUJ,EAAQnB,MAAQ,EAEhC,OAAOO,KAAKiB,OAAOF,EAAUC,GAAW,GA8BvBE,CAAaX,EAAMC,GAC9BJ,EAAQ,YAAII,EAAMJ,OAAO1B,KAAI,SAAA2B,GAAI,OAAIA,EAAKZ,QAEhD,OAAOJ,EAAuBoB,EAAUL,IC1D/Be,EAAW,SAACC,GACrB,IAEIC,EAAO,EAEXD,GAAO,IAGP,IADA,IAAME,EAAmBC,SAAS,mBACzBtC,EAAI,EAAGA,EAAImC,EAAItB,OAAQb,IACxBoC,EAAOC,IACPD,EAAOE,SAASF,EARV,MAUVA,EAXS,IAWFA,EAAcD,EAAII,WAAWvC,GAExC,OAAOoC,GAIEI,EAAc,SAACpB,EAAeqB,GACvC,MAAsB,YAAlBrB,EAAKsB,SACE,CAAC,GAAI,IAAK,KACQ,SAAlBtB,EAAKsB,SACL,CAAC,IAAK,GAAI,KAgBVD,EAAUE,IAAIvB,EAAKsB,WAKrBE,EAAiB,SAACC,GAG3B,MAAM,OAAN,OAFiC,IAApB,IAAMA,GAAmB,IAEtC,iBAGSC,EAAgB,SAACxB,EAAgBC,GAC1C,IAAMf,EAAOa,EAAuBC,EAAMC,GAE1C,OAAa,IAATf,EACO,QAEJoC,EAAepC,IC7CbuC,EAAW,SAAC3B,EAAW4B,GAChC,IAAMC,EAAuB,IAAIC,IACjCC,EAAa/B,GAAM,SAACgC,EAAkBC,GAElCL,EAAE5B,EAAMgC,EAAUC,GAjBR,SAAZC,EAAalC,EAAY6B,EAAsBD,GACjDG,EAAa/B,GAAM,SAACgC,EAAkBC,GAC9BJ,EAAQM,IAAInC,EAAKoC,IAAMJ,EAAWC,EAASG,OAI/CP,EAAQQ,IAAIrC,EAAKoC,IAAMJ,EAAWC,EAASG,KAE3CR,EAAE5B,EAAMgC,EAAUC,GAClBC,EAAUD,EAAUJ,EAASD,OAS7BM,CAAUD,EAAUJ,EAASD,OAMxBU,EAAW,SAACtC,EAAY4B,GACjC,IAAK,IAAMW,KAAQvC,EACf,GAAIwC,OAAOC,UAAUC,eAAeC,KAAK3C,EAAMuC,GAAO,CAClD,IAAMK,EAAiB5C,EAAauC,GACpC,GAAGrE,MAAM2E,QAAQD,GAAgB,CAAC,IAAD,gBACNA,GADM,IAC7B,2BAAsC,CAAC,IAA5BX,EAA2B,aACbzC,IAAjByC,EAASG,KACTR,EAAEW,EAAMN,IAHa,oCAOzBW,QAAuCpD,IAAtBoD,EAAcR,KAC/BR,EAAEW,EAAMK,KAOfb,EAAe,SAAC/B,EAAY4B,GACrC,IAAK,IAAMW,KAAQvC,EACf,GAAIwC,OAAOC,UAAUC,eAAeC,KAAK3C,EAAMuC,GAAO,CAClD,IAAMK,EAAiB5C,EAAauC,GACpC,GAAGrE,MAAM2E,QAAQD,GAAgB,CAAC,IAAD,gBACNA,GADM,IAC7B,2BAAsC,CAAC,IAA5BX,EAA2B,aACbzC,IAAjByC,EAASG,KACTR,EAAEW,EAAMN,IAHa,oCAOzBW,QAAuCpD,IAAtBoD,EAAcR,KAC/BR,EAAEW,EAAMK,KCrDtBE,EAAepH,IAEfqH,EAAW,IAAIjB,IAAI,CACrB,UACA,OACA,YACA,QACA,OACA,gBACA,4BACA,+BAGEkB,EAAoB,SAACjD,GAAuB,IAAD,gBAC1BA,GAD0B,IAC7C,2BAA0B,CAAC,IAAhBC,EAAe,QAChBA,EAAaiD,YAGnBtB,EAAS3B,GAAM,SAACA,EAAMkD,EAAWjB,GAC7B,GAAKjC,EAAaiD,aACVF,EAASZ,IAAKnC,EAAaiD,WAAWE,YAAY,IAAK,CAEvD,IAAMC,EAAU,eAAQpD,EAAaiD,mBAC7BjD,EAAaiD,WACrBT,OAAOa,KAAKD,GAAYE,SAAQ,SAASC,GAAQvD,EAAauD,GAAOH,EAAWG,MAIxF,GAAKtB,EAAiBgB,aACdF,EAASZ,IAAKF,EAAiBgB,WAAWE,YAAY,IAAK,CAE3D,IAAMC,EAAU,eAAQnB,EAAiBgB,mBACjChB,EAAiBgB,WACzBT,OAAOa,KAAKD,GAAYE,SAAQ,SAASC,GAAQtB,EAAiBsB,GAAOH,EAAWG,WApBvD,gCA4BpCC,EAAa,uCAAG,WAAOC,GAAP,mBAAAzH,EAAA,6DACnB0H,EAAQC,EAAYF,GADD,SAGPxH,MAAM,GAAD,OAAI6G,EAAJ,WACnB,CACI5G,OAAQ,OACRI,KAAMuC,KAAKC,UAAU,CAAE4E,UACvB3E,QAAS,CACL,eAAgB,oBAEpB5C,YAAa,YAEhByH,MAAK,SAAAxH,GAAG,OAAIA,EAAIC,UAChBuH,MAAK,SAAAxH,GAEF,OADAc,QAAQC,IAAI,oBAAqBf,GAC1BA,KAEVwH,MAAK,SAACxH,GAAD,OAASA,EAAIyH,QAClBD,MAAK,SAACxH,GAAD,OAASA,EAAI0H,cAlBE,cAGnB1H,EAHmB,gBAoBGA,EApBH,cAoBnB2H,EApBmB,OAqBzB7G,QAAQC,IAAI,kBAAmB4G,GAC/Bf,EAAkBe,EAAcC,OAtBP,kBAuBlBD,GAvBkB,4CAAH,sDA0BbJ,EAAc,SAACM,GAoFxB,MAlFW,kDAEkBA,EAFlB,+vECrETC,EAAa,SAACC,EAASC,GACzB,IAAIC,GAAS,EAQb,OAPAC,EAAaF,GAAG,SAAC7B,GACRC,OAAOC,UAAUC,eAAeC,KAAKwB,EAAG5B,KACzC8B,GAAS,EACRF,EAAU5B,GAAS6B,EAAU7B,OAI/B8B,GAIEE,EAAc,SAACC,EAA0BC,GAIlD,IAAKA,EAAO1E,QAAU0E,EAAOC,MAEzB,OAAO,KAGX,IAToG,EAS9FC,EAA8B,CAAC5E,MAAO,GAAI2E,MAAO,IAEnDE,GAAU,EAER7E,EAAQ,IAAI8E,IACZH,EAAQ,IAAIG,IAdkF,cAgBjFL,EAASzE,OAhBwE,IAgBpG,2BAAmC,CAAC,IAAzBC,EAAwB,QAC/BD,EAAM+E,IAAI9E,EAAKoC,IAAKpC,IAjB4E,kDAoB9EyE,EAAO1E,OApBuE,IAoBpG,2BAAoC,CAAC,IAA1BgF,EAAyB,QAC1B/E,EAAOD,EAAMiF,IAAID,EAAQ3C,KAC3BpC,EACIkE,EAAWlE,EAAM+E,KACjBH,GAAU,IAGd7E,EAAM+E,IAAIC,EAAQ3C,IAAK2C,GACvBH,GAAU,IA5BkF,kDAiCjFJ,EAASE,OAjCwE,IAiCpG,2BAAmC,CAAC,IAAzBxE,EAAwB,QAC/B,GAAIA,EAAM,CACN,IAAMI,EAASJ,EAAKI,OAAO8B,KAAOlC,EAAKI,OACjCE,EAASN,EAAKM,OAAO4B,KAAOlC,EAAKM,OACvCkE,EAAMI,IACFxE,EAASJ,EAAK+E,MAAQzE,EACtBN,KAvCwF,kDA4C9EuE,EAAOC,OA5CuE,IA4CpG,2BAAoC,CAAC,IAA1BQ,EAAyB,QAC1BC,EAAiBD,EAAQ5E,QAAU4E,EAAQ5E,OAC3C8E,EAAiBF,EAAQ1E,QAAU0E,EAAQ1E,OACpCkE,EAAMM,IAAIG,EAAgBD,EAAQD,MAAQG,KAEnDV,EAAMI,IAAII,EAAQ5E,OAAS4E,EAAQD,MAAQC,EAAQ1E,OAAQ0E,GAC3DN,GAAU,IAlDkF,8BAwDpG,OAFAD,EAAY5E,MAAQ7B,MAAMC,KAAK4B,EAAMjD,UACrC6H,EAAYD,MAAQxG,MAAMC,KAAKuG,EAAM5H,UACjC8H,EACOD,EAEA,MCCTU,EAAc,SAACrF,GACjB,IAAMsF,EAAItF,EAAKmD,aAAenD,EAAKuF,UAEnC,OAAID,EACIpH,MAAM2E,QAAQyC,GACPA,EAAE,GAENA,GAGXpI,QAAQE,KAAK,gCAAiC4C,GACvC,YAGX,SAASwF,EAAUC,EAAaC,GAG5B,OADwB/F,KAAKC,MAAMD,KAAKgG,UAAYD,EAAMD,EAAM,GAAKA,GAKlE,IAAMG,EAAyB,SAACC,GAEnC,IAAM9F,EAAmB,GACnB2E,EAAmB,GAEnBoB,EAAgC,IAAIjB,KHhCb,SAApBkB,EAAqB/F,EAAYgG,GAC1C1D,EAAStC,GAAM,SAACgC,EAAkBC,GAC9B+D,EAAShG,EAAMgC,EAAUC,GAEzB8D,EAAkB9D,EAAU+D,MG8BhCD,CAAkBF,GACd,SAACI,EAAoBjE,EAAkBkE,GACnC,GAAgB,UAAblE,EAAqB,CAEpB,GAA6B,YAA1BqD,EAAYY,GACX,OAGJ,GAA2B,YAAxBZ,EAAYa,GACX,OAGJ,GAA6B,SAA1Bb,EAAYY,GACX,OAGJ,GAA2B,SAAxBZ,EAAYa,GACX,OAGJxB,EAAMyB,KAAK,CACP7F,OAAQ2F,EAAS7D,IACjB6C,MAAOjD,EACPxB,OAAQ0F,EAAO9D,UHhEN,SAAhBgE,EAAiBpG,EAAYgG,GACtCA,EAAShG,GACTsC,EAAStC,GAAM,SAACqG,EAAGpE,GACfmE,EAAcnE,EAAU+D,MGkE5BI,CAAcP,GAAY,SAAC7F,GACvB,IAAMsB,EAAW+D,EAAYrF,GAE7B,GAAgB,YAAbsB,GAIa,SAAbA,EAAH,CAIA,IAAMgF,EC9IO,SAAChF,EAAkBtB,GACpC9C,QAAQC,IAAI,WAAYmE,GAExB,IAAMiF,EAAQvG,EAEd,OAAOsB,GACH,IAAK,UAAW,OAAOiF,EAAMC,cAAgBD,EAAME,YAAc,UACjE,IAAK,QAAS,OAAOF,EAAM1K,UAAY,QACvC,IAAK,OAAQ,OAAO0K,EAAMG,WAAa,OACvC,IAAK,YAAa,OAAOH,EAAMI,aAAe,YAC9C,IAAK,OAAS,OAAOJ,EAAM9C,MAAQ,OACnC,QAAS,OAAOnC,GAAY,IDmIVsF,CAAatF,EAAUtB,GAEnC6G,EAAY,eAAO7G,GAEzB6G,EAAazH,KAAOyH,EAAazH,MAAQ,EACzCyH,EAAaC,eAAiBD,EAAaC,gBAAkB,GAhBnB,oBAkBxB9G,EAAK+G,OAAS,IAlBU,IAkB1C,IAAI,EAAJ,qBAAmC,CAAC,IAA1B3H,EAAyB,QAC/ByH,EAAazH,MAAQA,EAAK4H,YAAc,EACxCH,EAAaC,gBAAkB1H,EAAK6H,eAAiB,IApBf,8BAuB1C3E,EAAStC,GAAM,SAACkH,EAAcjF,GAGzB4E,EAAqBK,QAAQ1H,KAGlC,IAAM2H,EAAO,aACT9J,KAAM2C,EAAKoC,KACRyE,EAFM,CAGT/G,GAAIE,EAAKoC,IACTd,WACAgF,YACAnC,EAAG,IAAMqB,EAAU,EAAG,IACtBpB,EAAG,IAAMoB,EAAU,EAAG,MAG1BM,EAAQhB,IAAI9E,EAAKoC,IAAK+E,OA1EyE,oBA6E5ErB,EAAQhJ,UA7EoE,IA6EnG,2BAAiD,CAAC,IAAvCqK,EAAsC,QAC7CpH,EAAMoG,KAAKgB,IA9EoF,8BAiFnG,MAAO,CACHpH,QACA2E,UExJF0C,G,OAAU,SAACC,EAAWC,EAAWC,GAGnC,IAAMC,EAAID,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCG,EAAI,EAAIF,EAAIC,EAElB,MAAO,EALPH,GAAK,KAKO,EAAI,EAAGA,EAAGA,EAAI,EAAI,GAAGhJ,KAAI,SAACqJ,GAgBlC,OAfIA,EAAQ,GACRA,IAEAA,EAAQ,GACRA,IAGAA,EADAA,EAAQ,EAAI,EACJD,EAAc,GAATD,EAAIC,GAASC,EACnBA,EAAQ,GACPF,EACDE,EAAQ,EAAI,EACXD,EAAc,GAATD,EAAIC,IAAU,EAAI,EAAIC,GAE3BD,EAEL9H,KAAKiB,MAAc,IAAR8G,QAIpB7E,EAAU,SAAC8E,GACb,MAA6C,mBAAtCnF,OAAOC,UAAUlE,SAASoE,KAAKgF,IAS7BC,EACT,WAAYC,GAAwC,IAAD,gCAoCnDC,IAAM,SAAC/G,GACH,IAAIsG,EAAGC,EACHtG,EAAO,EAAKA,KAAKD,GAErB,GAAI,EAAKgH,UAAUtI,OAAQ,CACvB,IAAMuI,EAAQ,EAAKD,UAAU/G,EAAO,EAAK+G,UAAUtI,QAEnD4H,EAAMrG,EAAO,EAAK+G,UAAUtI,OADN,KACkCuI,EAAMtC,IAAMsC,EAAMvC,KADpD,IAC2EuC,EAAMvC,SAEvG4B,EAAIrG,EAAO,IAOf,OALAA,EAAOE,SAASF,EAAO,KACvBsG,EAAI,EAAKA,EAAEtG,EAAO,EAAKsG,EAAE7H,QACzBuB,EAAOE,SAASF,EAAO,EAAKsG,EAAE7H,QAGvB,CAAC4H,EAAGC,EAFP,EAAKC,EAAEvG,EAAO,EAAKuG,EAAE9H,UAlDsB,KA8DnD8B,IAAM,SAACR,GACH,IAAM+G,EAAM,EAAKA,IAAI/G,GACrB,OAAOqG,EAAQa,MAAM,EAAMH,IA7D3B,IAAMI,EAAK,EAFXL,EAAUA,GAAW,IAEDM,UAAWN,EAAQO,YAAY/J,KAAI,SAACgK,GAEpD,OAAOxF,EADPwF,EAAQA,GAAS,CAAC,IAAM,GAAK,MACLA,EAAMC,SAAW,CAACD,MAG9CE,KAAKhB,EAAIW,EAAG,GACZK,KAAKjB,EAAIY,EAAG,GAEe,kBAAhBL,EAAQW,MACfX,EAAQW,IAAM,CAAC/C,IAAKoC,EAAQW,IAAK9C,IAAKmC,EAAQW,MAEvB,kBAAhBX,EAAQW,KAAqB3F,EAAQgF,EAAQW,OACpDX,EAAQW,IAAM,CAACX,EAAQW,MAEA,qBAAhBX,EAAQW,MACfX,EAAQW,IAAM,IAElBD,KAAKR,UAAYF,EAAQW,IAAInK,KAAI,SAAU2J,GACvC,MAAO,CACHvC,IAA0B,qBAAduC,EAAMvC,IAAsB,EAAIuC,EAAMvC,IAClDC,IAA0B,qBAAdsC,EAAMtC,IAAsB,IAAMsC,EAAMtC,QAI5D6C,KAAKvH,KAAO6G,EAAQ7G,MAAQF,GA0CvBwD,EAAe,SAACtE,EAAY4B,GACrC,IAAK,IAAMW,KAAQvC,EACXwC,OAAOC,UAAUC,eAAeC,KAAK3C,EAAMuC,KACvCrE,MAAM2E,QAAQ7C,EAAKuC,IACfvC,EAAKuC,GAAM9C,OAAS,QACMD,IAAtBQ,EAAKuC,GAAM,GAAGH,KACdR,EAAEW,GAIVX,EAAEW,KAWZkG,EAAW,uCAAG,WAChBxE,EACAyE,EACAC,GAHgB,SAAA3M,EAAA,yDAKXiI,EALW,iEASVT,EAAcS,GACfL,KADC,uCACI,WAAOI,GAAP,iBAAAhI,EAAA,sDACIyI,EAASmB,EAAuB5B,GACtC9G,QAAQC,IAAI,SAAUsH,GAEF,QADdmE,EAAcrE,EAAYmE,EAAMG,UAAWpE,MAEzCiE,EAAMI,cAAgB7E,EACtB0E,EAAS,eACFD,EADC,CAEJI,YAAa7E,EACb4E,UAAWD,KAGfD,EAAS,eACFD,EADC,CAEJI,YAAa7E,EACb4E,UAAWpE,MAfrB,2CADJ,uDAqBDsE,OAAM,SAACC,GAAD,OAAO9L,QAAQuD,MAAM,2BAA4BuI,MA9B5C,2CAAH,0DA4NFC,GA1KM,SAAC,GAA+C,IAA9ChF,EAA6C,EAA7CA,SAAUiF,EAAmC,EAAnCA,WAAmC,EACtCC,IAAMC,SARH,SAACnF,GAC9B,MAAO,CACH4E,UAAW,CAAC9I,MAAO,GAAI2E,MAAO,IAC9BoE,YAAa7E,GAKwBoF,CAAyBpF,IADF,mBACzDyE,EADyD,KAClDC,EADkD,KAE1DW,EAAWC,iBAAO,MAExBC,qBAAU,WAENF,EAASG,QAAQC,QAAQ,OAAQC,OACjCL,EAASG,QAAQC,QAAQ,UAAWC,IAAgB,KACpDL,EAASG,QAAQC,QAAQ,SAAUC,OACnCL,EAASG,QAAQC,QAAQ,OAAO,WAI5BhB,EAAMG,UAAU9I,MAAMuD,SAAQ,SAAAtD,GAC1B,IAAMmE,EAAInE,EAAKmE,GAAK,EAAGC,EAAIpE,EAAKoE,GAAK,EAEjCzE,KAAKiK,IAAIzF,GAJQ,MAKjBnE,EAAK6J,KAAO,GAEZlK,KAAKiK,IAAIxF,GAPQ,MAQjBpE,EAAK8J,KAAO,WAIzB,CAACpB,IAGJc,qBAAU,WACNf,EAAYxE,EAAUyE,EAAOC,GAC7B,IAAMoB,EAAWC,YAAW,sBAAC,sBAAAhO,EAAA,0DACrBiI,EADqB,gCAEfwE,EAAYxE,EAAUyE,EAAOC,GAFd,2CAI1B,KACH,OAAO,kBAAMsB,cAAcF,MAC5B,CAAC9F,EAAUyE,IAEd,IAAMG,EAAYH,EAAMG,UAElBxH,EAAY,IAAIuG,EAAU,IAIhC,OACI,oCACI,kBAAC,IAAD,CACIiB,UAAWA,EACXvC,UAAW,SAACtG,GAAD,OAAgBA,EAAKsG,WAChC4D,gBAAgB,EAChBC,yBAA0B,EAC1BC,6BAA8B,SAAClK,GAC3B,OP/LiB,SAACA,EAAgBC,GAClD,IAAMkK,EAAqBpK,EAAuBC,EAAMC,GACxD,OAAIkK,GAAsB,GACf,EACAA,GAAsB,GACtB,EACAA,GAAsB,GACtB,EAEA,EOsLYC,CAAsBpK,EAAM2I,IAEvC0B,6BAA8B,SAACrK,GAC3B,OAAOwB,EAAcxB,EAAM2I,IAE/B2B,6BAA8B,KAC9BC,YACI,SAACzK,EAAY0K,GACTxB,EAAWlJ,IAGnB2K,2BAA4B,EAC5BC,UAAW,EACXC,2BAA6B,SAAA3K,GACzB,OP9O0B,SAACA,EAAgBC,GAC3D,IAAMH,EAEFH,EAASK,EAAKM,OAAOnD,KAAM8C,EAAMJ,OAErC,GAAa,OAATC,GAA+B,IAAdA,EAAKZ,KACtB,OAAO,EAEX,IAAMW,EAAQ,YAAII,EAAMJ,OAAO1B,KAAI,SAAA2B,GAAI,OAAIA,EAAKZ,QAC1C0L,EAAiB9L,EAAuBgB,EAAKZ,KAAMW,GAEzD,OAAuB,IAAnB+K,EACO,EAGPA,GAAkB,GACX,IACAA,GAAkB,GAClB,GACAA,GAAkB,GAClB,IAEA,EOwNYC,CAA+B7K,EAAM2I,IAEhDmC,qBAAuB,iBAAM,SAC7BC,iBAAmB,SAAC/K,EAAgBgL,GAChC,IAEMC,EAAQjL,EAAKI,OACb8K,EAAMlL,EAAKM,OAIjB,GAFAN,EAAKwH,MAAQhG,EAAcxB,EAAM2I,GAEZ,kBAAVsC,GAAqC,kBAARC,EAAxC,CAEA,IAAMC,EAAU7I,OAAO8I,OAAP,MAAA9I,OAAM,YACf,CAAC,IAAK,KAAKnE,KAAI,SAACkN,GAAD,sBAETA,EAAIJ,EAAMI,IAAMH,EAAIG,GAAKJ,EAAMI,IAAM,QAK5CC,EAAU,CAACrH,EAAGiH,EAAIjH,EAAIgH,EAAMhH,EAAGC,EAAGgH,EAAIhH,EAAI+G,EAAM/G,GAEhDqH,EAAgB9L,KAAK+L,KAAK/L,KAAKgM,IAAIH,EAAQrH,EAAG,GAAKxE,KAAKgM,IAAIH,EAAQpH,EAAG,IAAMwH,GAE/EC,EAAYlM,KAAKmM,MAAMN,EAAQpH,EAAGoH,EAAQrH,GAE1C0H,EAAYlM,KAAKoM,GAAK,IAAGF,IAAclM,KAAKoM,GAAKF,IACjDA,GAAalM,KAAKoM,GAAK,IAAGF,KAAelM,KAAKoM,GAAKF,IAEvD,IAAM5G,ED5RT,SAACA,GACd,MAAc,aAAVA,EACO,WAEJA,ECwRuB+G,CAAS9L,EAAK+E,OAE5BiG,EAAIe,KAAO,aACX,IAAMC,EAAWvM,KAAK8F,IA7BA,EA6BmBgG,EAAgBP,EAAIiB,YAAYlH,GAAOmH,OAChFlB,EAAIe,KAAJ,UAAcC,EAAW,EAAzB,YAEA,IAAIG,EAAYnB,EAAIiB,YAAYlH,GAAOmH,MAIjCE,EAAiB,CAFvBD,GAAa1M,KAAKiB,MAAkB,IAAZyL,GAEWH,GAAU7N,KAAI,SAAAiB,GAAC,OAAIA,EAAe,GAAX4M,KAE1DhB,EAAIqB,OACJrB,EAAIsB,UAAUnB,EAAQlH,EAAGkH,EAAQjH,GACjC8G,EAAIuB,OAAOZ,GACXX,EAAIwB,UAAY,qBAChBxB,EAAIyB,SAAJ,MAAAzB,EAAG,EAAWoB,EAAe,GAAK,GAAIA,EAAe,GAAK,GAAvD,mBAA6DA,KAChEpB,EAAI0B,UAAY,SAChB1B,EAAI2B,aAAe,SACnB3B,EAAIwB,UAAY,QAEhBxB,EAAI4B,SAAS7H,EAAO,IAAK,GACzBiG,EAAI6B,YAERC,iBAAmB,SAAChN,EAAYkL,EAAU+B,GAGtC,IAAMC,ER7SF,SAAClN,EAAeG,GACpC,IAAMJ,EAAQ,YAAII,EAAMJ,OAAO1B,KAAI,SAAA2B,GAAI,OAAIA,EAAKZ,QAC1C0L,EAAiB9L,EAAuBgB,EAAKZ,KAAMW,GAEzD,OAAI+K,GAAkB,GACX,EACAA,GAAkB,GAClB,EAEA,EQoSoBqC,CAASnN,EAAM6I,GAC9BqC,EAAIqB,OAGJrB,EAAIkC,YACJlC,EAAImC,IAAIrN,EAAKmE,EAAGnE,EAAKoE,EAAY,IAAT8I,EAAc,EAAG,EAAIvN,KAAKoM,IAAI,GACtDb,EAAIwB,UN9QC,SAAC1M,EAAeG,EAAiBkB,GACtD,IAAMtB,EAAQ,YAAII,EAAMJ,OAAO1B,KAAI,SAAA2B,GAAI,OAAIA,EAAKZ,QAE1C0L,EAAiB9L,EAAuBgB,EAAKZ,KAAMW,GAEzD,GAAuB,IAAnB+K,EAAsB,CACtB,IAAMwC,EAAalM,EAAYpB,EAAMqB,GACrC,MAAM,QAAN,OAAeiM,EAAW,GAA1B,aAAiCA,EAAW,GAA5C,aAAmDA,EAAW,GAA9D,QAGJ,OAAO9L,EAAesJ,GMoQUyC,CAAUvN,EAAM6I,EAAWxH,GAC3C6J,EAAIsC,OACJtC,EAAI6B,UAEJ7B,EAAIqB,OAGJrB,EAAIkC,YACJlC,EAAImC,IAAIrN,EAAKmE,EAAGnE,EAAKoE,EAAY,IAAT8I,EAAc,EAAG,EAAIvN,KAAKoM,IAAI,GAEtD,IAAM0B,EAAUrM,EAAYpB,EAAMqB,GAElC6J,EAAIwB,UAAJ,eAAwBe,EAAQ,GAAhC,aAAuCA,EAAQ,GAA/C,aAAsDA,EAAQ,GAA9D,QACAvC,EAAIsC,OACJtC,EAAI6B,UAEJ,IAAM9H,EAAQjF,EAAKsG,UAEb4F,EAAW,GAAKe,EAEtB/B,EAAIe,KAAJ,UAAcC,EAAd,YAGA,IAEMI,EAAiB,CAFLpB,EAAIiB,YAAYlH,GAAOmH,MAENF,GAAU7N,KAAI,SAAAiB,GAAC,OAAIA,EAAe,GAAX4M,KAE1DhB,EAAIwB,UAAY,wBAChBxB,EAAIyB,SAAJ,MAAAzB,EAAG,CAAUlL,EAAKmE,EAAImI,EAAe,GAAK,EAAGtM,EAAKoE,EAAIkI,EAAe,GAAK,GAAvE,mBAA6EA,KAChFpB,EAAI0B,UAAY,SAChB1B,EAAI2B,aAAe,SACnB3B,EAAIwB,UAAY,qBAChBxB,EAAIwB,UAAY,QAChBxB,EAAI4B,SAAS7H,EAAOjF,EAAKmE,EAAGnE,EAAKoE,IAGrCsJ,IAAKpE,M,sECrWfqE,GAAYC,aAAW,CACzBC,KAAM,CACF3B,SAAU,OAEd4B,MAAO,CACHC,SAAU,KAEdC,YAAa,CACT9B,SAAU,OACVxE,MAAO,aA0FCuG,OA1DhB,YAA2C,IAAvBjO,EAAsB,EAAtBA,KAChB9C,QAAQC,IAAI,oBAAqB6C,GACjC,IAAMkO,EAAUP,KACVQ,EAAS,IAAIrM,IACf,CAAC,KAAM,cAAe,eAAgB,QAAQ,MAAO,QAAS,OAAQ,WAAY,YAAa,IAAK,IAAK,QAAS,KAAM,KAAM,KAAM,OAGxIC,EAAa/B,GAAM,SAACgC,EAAkBoM,GAClCD,EAAO9L,IAAIL,MAGf,IAAMqM,EAAc,GAmBhB,OAjBJ/J,EACItE,GACA,SAACsO,GACG,IAAM/L,EAAQvC,EAAasO,GAEvBH,EAAOhM,IAAImM,IACP/L,IACI+L,EAASC,SAAS,SAClBF,EAAYC,GAAY,IAAIE,KAAKjM,GAAMkM,iBAEvCJ,EAAYC,GAAY/L,MAQpC,kBAACmM,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOlS,UAAWyR,EAAQJ,OA5D1C,SAAoB9N,EAAY4O,GAC5B,OAAG5O,EAEC,kBAAC6O,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,MAAM,OACNvS,UAAWmS,EAAOZ,aAClB,0CAEJ,kBAACe,GAAA,EAAD,CACIC,MAAM,OACNvS,UAAWmS,EAAOZ,aAElB,yCAML,qCA0CKiB,CAAWjP,EAAMkO,GAErB,kBAACgB,GAAA,EAAD,KAEY1M,OAAO2M,QAAQd,GAAahQ,KAAI,SAAC+Q,GAAW,IAAD,cAClBA,EADkB,GAChC7L,EADgC,KAC3B8L,EAD2B,KAGvC,OACI,kBAACP,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAWC,MAAM,QAAO,2BAAIzL,IAC5B,kBAACwL,GAAA,EAAD,CAAWC,MAAM,QAAQK,WAQpD,S,kFCzFP1B,GAAYC,aAAW,CACzBC,KAAK,CACD3B,SAAU,QAEdoD,OAAQ,CACJlD,MAAO,QACP1E,MAAO,QACP6H,gBAAgB,WAEpBC,MAAO,CACHtD,SAAU,OACVxE,MAAO,WAEX+H,KAAK,CACD/H,MAAO,UACPgI,OAAQ,iBAEZC,OAAO,CACHjI,MAAO,UACPgI,OAAQ,OAEZE,OAAO,CACHC,QAAS,QAEb/B,MAAO,CACHC,SAAU,OAWlB,SAAS+B,GAAWtT,GAEhB,OACI,oCACQ,kBAACsS,GAAA,EAAD,CAAUvL,IAAK/G,EAAMiH,MACb,kBAACsL,GAAA,EAAD,CAAWgB,UAAU,KAAK/L,MAAM,OAChC,kBAACgM,GAAA,EAAD,CACIC,QACI,WACIzT,EAAM0T,QAAQ1T,EAAMiH,QAG3BjH,EAAMiH,KAAO,OAASjH,EAAM2T,UAyBzD,SAASC,GAAT,GAA2D,IAAjCF,EAAgC,EAAhCA,QAAgC,EAC5B9G,mBAPnB,CACHiH,SAAS,EACTC,OAAQ,KAI0C,mBAC/C5H,EAD+C,KACxCC,EADwC,KAGhDuF,EAAUP,KAmBhB,OAjBAnE,qBAAU,WACN,IAAMO,EAAWC,aAAY,WACzB9M,QAAQC,IAAI,mBACZoT,KACK3M,MAAK,SAAC4M,GACCA,EAASF,QAAUE,EAASF,SAAW5H,EAAM4H,QAC7C3H,EAAS,eACFD,EADC,CAEJ4H,OAAQE,EAASF,QAAU,WAI5C,KACH,OAAO,kBAAMrG,cAAcF,OAK3B,oCACI,yBAAKtN,UAAWyR,EAAQ0B,QACpB,uBAAGnT,UAAWyR,EAAQsB,OAClB,kBAAC,KAAD,CAAiB/S,UAAayR,EAAQuB,OAD1C,UAIA,kBAACO,GAAA,EAAD,CACIvT,UAAayR,EAAQoB,OACrBW,QAAS,WACLtH,EAAS,eACFD,EADC,CAEJ2H,SAAU3H,EAAM2H,aAGxB,kBAAC,KAAD,CAAgB5T,UAAWyR,EAAQyB,WAI3C,yBAAKlT,UAAU,cACViM,EAAM2H,SAAW3H,EAAM4H,QACpB5H,EAAM4H,OAAOjS,KACT,SAACoF,GAEG,OACI,kBAACiL,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOlS,UAAWyR,EAAQJ,MAAO2C,aAAW,cACxC,kBAACvB,GAAA,EAAD,KACI,kBAACY,GAAD,CACIvM,IAAKmN,OAAOjN,EAAKrB,KACjBA,IAAKqB,EAAKrB,IACVqB,KAAMA,EAAKkN,UACXR,MAAO1M,EAAK0M,MACZD,QAASA,WAW7C,kBAACU,GAAA,EAAD,OAMZ,IAAM9N,GAAepH,IAGf6U,GAAS,uCAAG,8BAAAvU,EAAA,6DACdkB,QAAQC,IAAI,sBAAuB2F,IADrB,kKAcd5F,QAAQC,IAAI,4BAAuB2F,GAAvB,YAdE,SAeI7G,MAAM,GAAD,OAAI6G,GAAJ,WACnB,CACI5G,OAAQ,OACRI,KAAMuC,KAAKC,UAAU,CAAE4E,MAlBjB,oKAmBN3E,QAAS,CACL,eAAgB,oBAEpB5C,YAAa,YAEhByH,MAAK,SAAAxH,GAAG,OAAIA,EAAIC,UAChBuH,MAAK,SAAAxH,GAKF,OAJIA,EAAIyU,SACJ3T,QAAQuD,MAAM,gBAAiBrE,EAAIyU,QACnCzU,EAAIyH,KAAO,CAACyM,OAAQ,KAEjBlU,KAEVwH,MAAK,SAACxH,GAAD,OAASA,EAAIyH,QAhCT,cAeRzH,EAfQ,gBAkCSA,EAlCT,cAkCJ0U,EAlCI,yBAoCPA,GApCO,4CAAH,qDA2CTC,GAAc,SAAC,GAA8B,IAA7B/Q,EAA4B,EAA5BA,KAIlB,OACI,oCACI,kBAAC,GAAD,CAAWA,KAAMA,MAS7B,SAASgR,GAAT,GAA2D,IAAjCC,EAAgC,EAAhCA,QAAgC,EAC5B7H,oBAAS,GADmB,mBAC/CiH,EAD+C,KACtCa,EADsC,KAEhDhD,EAAUP,KAChB,OACI,oCACA,6BACI,yBAAKlR,UAAWyR,EAAQ0B,QACpB,uBAAGnT,UAAWyR,EAAQsB,OAAO,kBAAC,KAAD,CAAU/S,UAAWyR,EAAQuB,OAA1D,SACA,kBAACO,GAAA,EAAD,CACIvT,UAAayR,EAAQoB,OACrBW,QACI,WAAQiB,GAAO,SAAAb,GAAO,OAAKA,OAE/B,kBAAC,KAAD,CAAgB5T,UAAWyR,EAAQyB,WAI3C,yBAAKlT,UAAU,cAEP4T,GAAWY,GACP,oCACM,kBAAC,GAAD,CAAajR,KAAMiR,QAelC,SAASE,GAAT,GAAkE,IAAzCjB,EAAwC,EAAxCA,QAASe,EAA+B,EAA/BA,QAC7C,OACI,oCACI,kBAACb,GAAD,CAAiBF,QAASA,IAC1B,kBAACc,GAAD,CAAiBC,QAASA,K,6FCtPhCtD,GAAYC,cAAW,SAACwD,GAAD,OAC3BC,aAAa,CACXxD,KAAM,CACJgC,QAAS,QAEXyB,OAAQ,CACNC,WAAYH,EAAMI,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQN,EAAMI,YAAYE,OAAOC,MACjCC,SAAUR,EAAMI,YAAYI,SAASC,iBAGzCC,YAAa,CACX1F,MAAM,eAAD,OAdS,IAcT,OACL2F,WAfc,IAgBdR,WAAYH,EAAMI,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQN,EAAMI,YAAYE,OAAOM,QACjCJ,SAAUR,EAAMI,YAAYI,SAASK,kBAGzCC,WAAY,CACVC,YAAaf,EAAMgB,QAAQ,GAC3B1K,MAAO,WAET2K,KAAM,CACJxC,QAAS,QAEXyC,OAAQ,CACNlG,MA7Bc,IA8BdmG,WAAY,GAEdC,YAAa,CACXpG,MAjCc,KAmChBqG,aAAa,aACX5C,QAAS,OACT6C,WAAY,SACZC,QAASvB,EAAMgB,QAAQ,EAAG,IAEvBhB,EAAMwB,OAAOC,QALN,CAMVC,eAAgB,aAElBC,QAAS,CACPC,SAAU,EACVL,QAASvB,EAAMgB,QAAQ,GACvBb,WAAYH,EAAMI,YAAYC,OAAO,SAAU,CAC7CC,OAAQN,EAAMI,YAAYE,OAAOC,MACjCC,SAAUR,EAAMI,YAAYI,SAASC,gBAEvCE,YAlDc,KAoDhBkB,aAAc,CACZ1B,WAAYH,EAAMI,YAAYC,OAAO,SAAU,CAC7CC,OAAQN,EAAMI,YAAYE,OAAOM,QACjCJ,SAAUR,EAAMI,YAAYI,SAASK,iBAEvCF,WAAY,GAEd9N,SAAS,CACPyD,MAAM,UACNwE,SAAU,OACVwD,OAAQ,qBAEVE,OAAO,CACL1D,SAAU,QAEZgH,MAAM,CACJxL,MAAM,gBAWG,SAASyL,GAAT,GAA6D,IAA3CjD,EAA0C,EAA1CA,QAASkD,EAAiC,EAAjCA,QAASnC,EAAwB,EAAxBA,QAC3C/C,EAAUP,KADyD,EAGjDxE,IAAMC,UAAS,GAHkC,mBAGlEiK,EAHkE,KAG5DC,EAH4D,KAazE,OACE,yBAAK7W,UAAWyR,EAAQL,MAEtB,kBAAC0F,GAAA,EAAD,CACEC,SAAS,QACT/W,UAAWgX,aAAKvF,EAAQoD,OAAT,eACZpD,EAAQ4D,YAAcuB,KAGzB,kBAACK,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEjM,MAAM,UACN+I,aAAW,cACXR,QArBe,WACvBqD,GAAQ,IAqBApM,KAAK,QACLzK,UAAWgX,aAAKvF,EAAQgE,WAAYmB,GAAQnF,EAAQmE,OALtD,UAUA,kBAACuB,GAAA,EAAD,CACEC,QAAQ,KACRC,QAAM,GAEN,uBAAGrX,UAAWyR,EAAQ0B,QAAtB,aAKN,kBAACmE,GAAA,EAAD,CACEtX,UAAWyR,EAAQoE,OACnBuB,QAAQ,aACRG,OAAO,OACPX,KAAMA,EACNnF,QAAS,CACP+F,MAAO/F,EAAQsE,cAGjB,yBAAK/V,UAAWyR,EAAQuE,cACtB,kBAACzC,GAAA,EAAD,CAAQC,QA3CU,WACxBqD,GAAQ,KA0CkC,kBAAC,KAAD,CAAuB7W,UAAWyR,EAAQgF,UAGhF,kBAACtC,GAAA,EAAD,MAEA,kBAACO,GAAD,CACAjB,QAASA,EACTe,QAASA,KAKX,0BACExU,UAAWgX,aAAKvF,EAAQ6E,QAAT,eACZ7E,EAAQ+E,aAAeI,KAG1B,yBAAK5W,UAAYyR,EAAQuE,eAC3B,wBAAIhW,UAAYyR,EAAQjK,UAErBmP,GAAW,IAGZ,kBAACQ,GAAA,EAAD,CAAYM,WAAS,MAW7B,IAOaC,GAAe,WAAO,IAAD,EAEJhL,IAAMC,SAR3B,CACLgK,QAAS,GACTnC,QAAS,OAIqB,mBAEvBvI,EAFuB,KAEhBC,EAFgB,KAM9B,OAFAzL,QAAQC,IAAI,0BAA2BuL,EAAM0K,SAGzC,oCACI,kBAACD,GAAD,CACIjD,QACI,SAACzM,GAAD,OAAkBkF,EAAS,eACpBD,EADmB,CAEtB0K,QAAS3P,MAGjB2P,QAAS1K,EAAM0K,QACfnC,QAASvI,EAAMuI,UAGnB,kBAAC,GAAD,CACIhN,SAAUyE,EAAM0K,QAChBlK,WAAY,SAAClJ,GACT2I,EAAS,eACFD,EADC,CAEJuI,QAASjR,UC7MjC9C,QAAQC,IAAI,eAKZ,IAAMiX,GAAa,SACfC,EACAC,EACAC,GAEAD,EAAc,eACPD,EADM,CAETG,QAASD,KAEbE,aAAaC,QAAQ,gBAAiBH,IAUpCI,GAAS,WAAM,MAGmBxL,IAAMC,SATnC,CACHoL,QAASC,aAAaG,QAAQ,kBAAoB,QAClDC,oBAAqBrG,KAAKsG,QAIb,mBAGVT,EAHU,KAGEC,EAHF,KAkBjB,OAbA9K,qBAAU,WACqB,UAAvB6K,EAAWG,SACPhG,KAAKsG,MAAQT,EAAWQ,oBAAsB,KAC9C9Y,IACK6H,MAAK,SAACmR,GACH7X,QAAQC,IAAI,+BACP4X,GAAmC,UAAvBV,EAAWG,SACxBJ,GAAWC,EAAYC,EAAe,eAMnC,UAAvBD,EAAWG,SACXtX,QAAQC,IAAI,iCAER,kBAAC,EAAD,CAAOF,aACH,kBAAMmX,GAAWC,EAAYC,EAAe,qBAK7B,kBAAvBD,EAAWG,SACXtX,QAAQC,IAAI,yBACL,kBAAC,GAAD,QAKXD,QAAQE,KAAK,sBACN,qDAKI,SAAS4X,KAEpB,OADA9X,QAAQC,IAAI,cAER,oCACI,kBAAC,GAAD,OC9DQ8X,QACW,cAA7BtZ,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASqZ,MACvB,2DCVN,IAAMC,GAAYC,YAAe,CAC7BC,QAAS,CACL/X,KAAM,OACNgY,QAAS,CACLC,KAAM,cAKZC,GAAcC,SAASC,eAAe,QAE5CC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACA,kBAACC,EAAA,EAAD,CAAe1E,MAAO+D,IAClB,kBAACH,GAAD,MADJ,MAKAQ,IDiHE,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBrS,MAAK,SAAAsS,GACJA,EAAaC,gBAEdpN,OAAM,SAAAtI,GACLvD,QAAQuD,MAAMA,EAAMhD,c","file":"static/js/main.2909e31e.chunk.js","sourcesContent":["export const getAuthEdge = () => {\n    return \"http://\"+window.location.hostname+\":8900/\"\n}\n\n\nexport const getGraphQlEdge = () => {\n    return \"http://\"+window.location.hostname+\":5000/\"\n}","import React from 'react';\nimport './LogIn.css';\nimport {Field, Form, Formik} from \"formik\";\nimport {LoginProps} from '../src/modules/GraphViz/CustomTypes';\nimport {getAuthEdge} from './modules/GraphViz/engagement_edge/getEngagementEdge';\n\nconst engagement_edge = getAuthEdge();\n\nexport const checkLogin = async () => {\n    const res = await fetch(`${engagement_edge}checkLogin`, {\n        method: 'get',\n        credentials: 'include',\n    });\n\n    const body = await res.json();\n\n    return body['success'] === 'True';\n};\n\nexport const LogIn = (props: LoginProps) => {\n  return (\n    <div className = \"backgroundImage\">\n      <div className=\"grapl\"> Grapl </div>\n      <div className = \"formContainer\">\n      <Formik\n        initialValues={{ userName: \"\", password: \"\" }}\n        onSubmit={async values => {\n          const password = await sha256WithPepper(\n            values.userName, values.password\n          );\n          \n          const loginSuccess = login(values.userName, password);\n          \n          if (loginSuccess) {\n            props.loginSuccess();\n            console.log(\"Logged in\");\n          } else {\n            console.warn(\"Login failed!\")\n          }\n        }}\n      >\n        <Form>\n          <Field name=\"userName\" type=\"text\" placeholder=\"Username\" /> <br/>\n          <Field name=\"password\" type=\"password\" placeholder=\"Password\"/> <br/>\n          <button className=\"s ubmitBtn\"  type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n        \n      </div>\n    </div>\n  );\n}\n\nasync function sha256(message: string) {\n  // encode as UTF-8\n  const msgBuffer = new TextEncoder().encode(message);\n\n  // hash the message\n  const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n  // convert ArrayBuffer to Array\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n  // convert bytes to hex string\n  return hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');\n}\n\n\nconst sha256WithPepper = async (username: string, password: string) => {\n  // The pepper only exists to prevent rainbow tables for extremely weak passwords\n  // Client side hashing itself is only to prevent cases where the password is\n  // exposed before it makes it into the password database\n  const pepper = \"f1dafbdcab924862a198deaa5b6bae29aef7f2a442f841da975f1c515529d254\";\n  let hashed = await sha256(password + pepper + username);\n\n  for (let i = 0; i < 5000; i++) {\n      hashed = await sha256(hashed)\n  }\n  return hashed\n};\n\nconst login = async (username: string, password: string) => {\n      try {\n          const res = await fetch(`${engagement_edge}login`, {\n              method: 'post',\n              body: JSON.stringify({\n                  'username': username,\n                  'password': password\n              }),\n              headers: {\n                  'Content-Type': 'application/json',\n              },\n              credentials: 'include',\n          });\n          \n          const body = await res.json();\n          return body['success'] === 'True';\n        } catch (e) {\n          console.log(e);\n          return false\n      }\n    };\n\n// export default LogIn;\n","import {VizGraph, VizNode} from '../../CustomTypes';\n\nexport const calcNodeRiskPercentile = (_nodeRisk: number | {risk: number}, _allRisks: any) => {\n    let nodeRisk = _nodeRisk;\n    if (typeof _nodeRisk === 'object') {\n        nodeRisk = _nodeRisk.risk;\n    }\n\n    const allRisks = _allRisks\n        .map((n: any) => n || 0)\n        .sort((a: number, b: number) => a - b);\n\n    if (nodeRisk === undefined || nodeRisk === 0 || allRisks.length === 0) {\n        return 0\n    }\n\n    let riskIndex = 0;\n    for (const risk of allRisks) {\n        if (nodeRisk >= risk) {\n            riskIndex += 1;\n        }\n    }\n\n    return Math.floor((riskIndex / allRisks.length) * 100)\n};\n\n\nexport const nodeSize = (node: VizNode, Graph: VizGraph) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile >= 75) {\n        return 6\n    } else if (riskPercentile >= 25) {\n        return 5\n    } else {\n        return 4\n    }\n};\n","import { calcNodeRiskPercentile } from '../node/nodeCalcs'; \nimport { LinkType, VizNode, VizGraph } from '../../CustomTypes';\n\n\nconst findNode = (id: number, nodes: VizNode[]) => {\n    for (const node of (nodes || [])) {\n        if (node.id === id) {\n            return node\n        }\n    }\n    return null\n};\n\nexport const calcLinkRisk = (link: LinkType, Graph: VizGraph) => {\n    // console.log(\"LINK\", link)\n    let srcNode = \n        // findNode(link.source, Graph.nodes) || \n        findNode(link.source.name, Graph.nodes);\n    let dstNode = \n    // findNode(link.target, Graph.nodes)||\n        findNode(link.target.name, Graph.nodes);\n\n    if (!srcNode || !dstNode) {\n        console.error(\"Missing srcNode/dstNode\", srcNode, link, dstNode);\n        return 0;\n    }\n\n    const srcRisk = srcNode.risk || 0;\n    const dstRisk = dstNode.risk || 0;\n\n    return Math.round((srcRisk + dstRisk) / 2)\n};\n\nexport const calcLinkDirectionalArrowRelPos = (link: LinkType, Graph: VizGraph) => {\n    const node = \n    // findNode(link.target, Graph.nodes) || \n        findNode(link.target.name, Graph.nodes);\n\n    if (node === null || node.risk === 0) {\n        return 1.0\n    }\n    const nodes = [...Graph.nodes].map(node => node.risk);\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        return 1.0\n    }\n\n    if (riskPercentile >= 75) {\n        return 0.95\n    } else if (riskPercentile >= 50) {\n        return 0.9\n    } else if (riskPercentile >= 25) {\n        return 0.85\n    } else {\n        return 1.0\n    }\n};\n\nexport const calcLinkRiskPercentile = (link: LinkType, Graph: VizGraph) => {\n    const linkRisk = calcLinkRisk(link, Graph);\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    return calcNodeRiskPercentile(linkRisk, nodes);\n};\n\nexport const calcLinkParticleWidth = (link: LinkType, Graph:VizGraph) => {\n    const linkRiskPercentile = calcLinkRiskPercentile(link, Graph);\n    if (linkRiskPercentile >= 75) {\n        return 5\n    } else if (linkRiskPercentile >= 50) {\n        return 4\n    } else if (linkRiskPercentile >= 25) {\n        return 3\n    } else {\n        return 2\n    }\n};\n","import { calcNodeRiskPercentile } from '../calculations/node/nodeCalcs';\nimport { calcLinkRiskPercentile } from '../calculations/link/linkCalcs';\nimport { LinkType, VizGraph, VizNode } from '../CustomTypes'\nimport { ColorHash } from '../../../components/GraphViz';\n\nexport const BKDRHash = (str: string) => {\n    const seed = 131;\n    const seed2 = 137;\n    let hash = 0 as number;\n    // make hash more sensitive for short string like 'a', 'b', 'c'\n    str += 'x';\n    // Note: Number.MAX_SAFE_INTEGER equals 9007199254740991\n    const MAX_SAFE_INTEGER = parseInt(9007199254740991 / seed2 as any) as any;\n    for (let i = 0; i < str.length; i++) {\n        if (hash > MAX_SAFE_INTEGER) {\n            hash = parseInt(hash / seed2 as any);\n        }\n        hash = hash * seed + str.charCodeAt(i);\n    }\n    return hash;\n};\n\n//# TODO: Add custom coloring for each node\nexport const calcNodeRgb = (node: VizNode, colorHash: ColorHash) => {\n    if (node.nodeType === 'Process') {\n        return [31, 185, 128]\n    } else if (node.nodeType === 'File') {\n        return [177, 93, 255]\n    } \n    \n    // else if (node.nodeType === 'Lens'){\n    //     return []\n    // } else if(node.nodeType === 'IpPort'){\n    //     return []\n    // } else if(node.nodeType === 'IpConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessInboundConnection'){\n    //     return []\n    // } else if(node.nodeType === 'ProcessOutboundConnection'){\n    //     return []\n    // } \n    \n    else{\n        return colorHash.rgb(node.nodeType)\n    }\n}\n\n\nexport const percentToColor = (percentile: number) => {\n    const hue = (100 - percentile) * 40 / 100;\n\n    return `hsl(${hue}, 100%, 50%)`;\n};\n\nexport const calcLinkColor = (link: LinkType, Graph: VizGraph) => {\n    const risk = calcLinkRiskPercentile(link, Graph);\n    // Default link color if no risk\n    if (risk === 0) {\n        return 'white'\n    }\n    return percentToColor(risk);\n};\n\n\nexport const riskColor = (node: VizNode, Graph: VizGraph, colorHash: ColorHash) => {\n    const nodes = [...Graph.nodes].map(node => node.risk);\n\n    const riskPercentile = calcNodeRiskPercentile(node.risk, nodes);\n\n    if (riskPercentile === 0) {\n        const nodeColors = calcNodeRgb(node, colorHash);\n        return `rgba(${nodeColors[0]}, ${nodeColors[1]}, ${nodeColors[2]}, 1)`;\n    }\n\n    return percentToColor(riskPercentile);\n};\n\n\n","import { Node } from \"../CustomTypes\";\n\nconst _mapGraph = (node: Node, visited: Set<string>, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdgeProps(node, (edgeName: string, neighbor:Node) => {\n        if (visited.has(node.uid + edgeName + neighbor.uid)) {\n            return\n        }\n\n        visited.add(node.uid + edgeName + neighbor.uid);\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\nexport const mapGraph = (node:Node, f:(node:Node, prop:string, neighbor: Node) => void) => {\n    const visited: Set<string> = new Set();\n    mapEdgeProps(node, (edgeName:string , neighbor:Node) => {\n\n        f(node, edgeName, neighbor);\n        _mapGraph(neighbor, visited, f)\n    })\n};\n\n// type fType = (prop:string, neighbor: Node) => void)\n// Given a node, call 'f' on any of its neighbors\nexport const mapEdges = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const mapEdgeProps = (node: Node, f: (prop:string, neighbor: Node) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            const maybeNeighbor = (node as any)[prop];\n            if(Array.isArray(maybeNeighbor)) {\n                for (const neighbor of maybeNeighbor) {\n                    if (neighbor.uid !== undefined) {\n                        f(prop, neighbor)\n                    }\n                }\n            } else {\n                if (maybeNeighbor && maybeNeighbor.uid !== undefined) {\n                    f(prop, maybeNeighbor)\n                }\n            }\n        }\n    }\n};\n\nexport const traverseNodes = (node: Node, callback: (node: Node) => void) => {\n    callback(node);\n    mapEdges(node, (_, neighbor) => {\n        traverseNodes(neighbor, callback);\n    })\n}\n\nexport const traverseNeighbors = (node: Node, callback: (node:Node, prop:string, neighbor: Node) => void) => {\n    mapEdges(node, (edgeName: string, neighbor: Node) => {\n        callback(node, edgeName, neighbor);\n\n        traverseNeighbors(neighbor, callback);\n    })\n}\n\n","import {BaseNode, LensScopeResponse} from '../../GraphViz/CustomTypes'\nimport {mapGraph} from \"../graph/graph_traverse\";\nimport {getGraphQlEdge} from '../engagement_edge/getEngagementEdge';\n\nconst graphql_edge = getGraphQlEdge();\n\nconst builtins = new Set([\n    'Process',\n    'File',\n    'IpAddress',\n    'Asset',\n    'Risk',\n    'IpConnections',\n    'ProcessInboundConnections',\n    'ProcessOutboundConnections',\n])\n\nconst unpackPluginNodes = (nodes: BaseNode[]) => {\n    for (const node of nodes) {\n        if (!(node as any).predicates) {\n            continue\n        }\n        mapGraph(node, (node, edge_name, neighbor) => {\n            if ((node as any).predicates) {\n                if(!builtins.has((node as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(node as any).predicates};\n                    delete (node as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (node as any)[key] = pluginNode[key]; });\n                }\n            }\n\n            if ((neighbor as any).predicates) {\n                if(!builtins.has((neighbor as any).predicates.dgraph_type[0])) {\n                    // Using 'any' because the PluginType is temporary, and not valid outside of the initial response\n                    const pluginNode = {...(neighbor as any).predicates};\n                    delete (neighbor as any).predicates\n                    Object.keys(pluginNode).forEach(function(key) { (neighbor as any)[key] = pluginNode[key]; });\n                }\n            }\n        })\n\n    }\n}\n\nexport const retrieveGraph = async (lens: string): Promise<(LensScopeResponse & BaseNode)> => {\n    const query = expandScope(lens);\n\n    const res = await fetch(`${graphql_edge}graphql`,\n        {\n            method: 'post',\n            body: JSON.stringify({ query }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        })\n        .then(res => res.json())\n        .then(res => {\n            console.log('retrieveGraph res', res);\n            return res\n        })\n        .then((res) => res.data)\n        .then((res) => res.lens_scope);\n\n    const lensWithScope = await res;\n    console.log('LensWithScope: ', lensWithScope);\n    unpackPluginNodes(lensWithScope.scope);\n    return lensWithScope;\n};\n\nexport const expandScope = (lensName: string) => {\n    \n    const query = `\n    {\n        lens_scope(lens_name: \"${lensName}\") {\n            uid,\n            node_key,\n            lens_name,\n            lens_type,\n            dgraph_type,\n            scope {\n                ... on Process {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    process_name, \n                    process_id,\n                    children {\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n            \n                ... on Asset {\n                    uid, \n                    node_key, \n                    dgraph_type,\n                    hostname,\n                    asset_ip{\n                        ip_address\n                    }, \n                    asset_processes{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        process_name, \n                        process_id,\n                    },\n                    files_on_asset{\n                        uid, \n                        node_key, \n                        dgraph_type,\n                        file_path\n                    }, \n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on File {\n                    uid,\n                    node_key, \n                    dgraph_type,\n                    risks {  \n                        uid,\n                        dgraph_type,\n                        node_key, \n                        analyzer_name, \n                        risk_score\n                    },\n                }\n\n                ... on PluginType {\n                    predicates,\n                }\n            }\n        }\n    }\n`;\n\n    return query;\n}\n\n","import {mapNodeProps} from '../../../../src/components/GraphViz';\nimport {Node, MergeGraphType} from '../CustomTypes'; \n\n// merges y into x, returns true if update occurred\nconst mergeNodes = (x: Node, y: Node) => {\n    let merged = false;\n    mapNodeProps(y, (prop: string) => {\n        if (!Object.prototype.hasOwnProperty.call(x, prop)) {\n            merged = true;\n            (x as any)[prop] = (y as any)[prop]\n        }\n    });\n\n    return merged;\n};\n\n// #TODO: This algorithm is exponential, and doesn't have to be\nexport const mergeGraphs = (curGraph: MergeGraphType, update: MergeGraphType): MergeGraphType | null => {\n    // Merges two graphs into a new graph\n    // returns 'null' if there are no updates to be made\n\n    if (!update.nodes && !update.links) {\n        // empty update\n        return null\n    }\n\n    const outputGraph: MergeGraphType = {nodes: [], links: []};\n\n    let updated = false;\n\n    const nodes = new Map();\n    const links = new Map();\n\n    for (const node of curGraph.nodes) {\n        nodes.set(node.uid, node)\n    }\n\n    for (const newNode of update.nodes) {\n        const node = nodes.get(newNode.uid);\n        if (node) {\n            if (mergeNodes(node, newNode)) {\n                updated = true;\n            }\n        } else {\n            nodes.set(newNode.uid, newNode);\n            updated = true;\n        }\n    }\n// #TODO: console.log on link.source, check to see if it's an object or not. It should never be an object\n// this should only be a string / an int. At some point, it was getting sent as an object\n    for (const link of curGraph.links) {\n        if (link) {\n            const source = link.source.uid || link.source;\n            const target = link.target.uid || link.target;\n            links.set(\n                source + link.label + target,\n                link,\n            )\n        }\n    }\n\n    for (const newLink of update.links) {\n        const newLinkSource =  newLink.source || newLink.source;\n        const newLinkTarget =  newLink.target || newLink.target;\n        const link = links.get(newLinkSource + newLink.label + newLinkTarget);\n        if (!link) {\n            links.set(newLink.source + newLink.label + newLink.target, newLink);\n            updated = true;\n        }\n    }\n\n    outputGraph.nodes = Array.from(nodes.values());\n    outputGraph.links = Array.from(links.values());\n    if (updated) {\n        return outputGraph;\n    } else {\n        return null;\n    }\n}","import { traverseNodes, traverseNeighbors, mapEdges } from \"../graph/graph_traverse\"\nimport { getNodeLabel } from '../graph/labels';\nimport {LensScopeResponse, BaseNode} from \"../../GraphViz/CustomTypes\"\n\ninterface IVizNode {\n    uid: number,\n    name: number,\n    id: number, \n    nodeType: string,\n    nodeLabel: string,\n    x: number,\n    y: number,\n}\n\ninterface VizProcessNode extends IVizNode {\n    process_id: number,\n    process_name: string,\n    created_timestamp: number, \n    terminate_time: number,\n    image_name: string, \n    arguments: string,\n}\n\nexport interface File extends IVizNode {\n    file_name: string,\n    file_path: string,\n    file_extension: string,\n    file_mime_type: string,\n    file_size: number,\n    file_version: string, \n    file_description: string,\n    file_product: string,\n    file_company: string, \n    file_directory: string,\n    file_inode: number,\n    file_hard_links: string, \n    signed: boolean,\n    signed_status: string, \n    md5_hash: string,\n    sha1_hash: string,\n    sha256_hash: string,\n}\n\nexport interface IpConnections extends IVizNode {\n    src_ip_addr: string,\n    src_port: string,\n    dst_ip_addr: string,\n    dst_port: string,\n    created_timestamp: number,\n    terminated_timestamp: number,\n    last_seen_timestamp: number,\n}\ninterface VizAssetNode extends IVizNode {\n    hostname: string,\n}\n\ninterface VizLensNode extends IVizNode {\n    lens_name: string,\n    lens_type: string, \n}\n\ntype VizDynamicNode = IVizNode;\n\ntype VizNode = VizProcessNode | VizAssetNode | VizLensNode | VizDynamicNode;\n\ntype VizLink = {\n    source: number,\n    label: string,\n    target: number, \n}\n\ntype AdjacencyMatrix = {\n    nodes: VizNode[],\n    links: VizLink[]\n}\n\n\nconst getNodeType = (node: BaseNode) => {\n    const t = node.dgraph_type || node.node_type;\n\n    if (t) {\n        if (Array.isArray(t)) {\n            return t[0]\n        }\n        return t\n    }\n\n    console.warn('Unable to find type for node ', node);\n    return 'Unknown';\n};\n\nfunction randomInt(min: number, max: number) // min and max included\n{\n    let randomNum: number = Math.floor(Math.random() * (max - min + 1) + min);\n    return randomNum;\n}\n\n\nexport const graphQLAdjacencyMatrix = (inputGraph: (LensScopeResponse & BaseNode)): AdjacencyMatrix => {\n\n    const nodes: VizNode[] = []; \n    const links: VizLink[] = [];\n\n    const nodeMap: Map<number, VizNode> = new Map();\n\n    traverseNeighbors(inputGraph, \n        (fromNode: BaseNode, edgeName: string, toNode: BaseNode) => {\n            if(edgeName !== 'scope'){\n                \n                if(getNodeType(fromNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Unknown'){\n                    return;\n                }\n\n                if(getNodeType(fromNode) === 'Risk'){\n                    return;\n                }\n\n                if(getNodeType(toNode) === 'Risk'){\n                    return;\n                }\n                \n                links.push({\n                    source: fromNode.uid,\n                    label: edgeName, \n                    target: toNode.uid\n                })\n        } \n    })\n\n    traverseNodes(inputGraph, (node: BaseNode) => {\n        const nodeType = getNodeType(node);\n\n        if(nodeType === 'Unknown'){\n            return;\n        }\n\n        if(nodeType === 'Risk'){\n            return; \n        }\n\n        const nodeLabel = getNodeLabel(nodeType, node);\n\n        const strippedNode = {...node};\n\n        strippedNode.risk = strippedNode.risk || 0;\n        strippedNode.analyzer_names = strippedNode.analyzer_names || \"\";\n\n        for(const risk of node.risks || []){\n            strippedNode.risk += risk.risk_score || 0;\n            strippedNode.analyzer_names += risk.analyzer_name || \"\";\n        }\n\n        mapEdges(node, (edge: string, neighbor: BaseNode) => {\n            // The stripped node is being converted to another type, so we can cast\n            // to any here\n            (strippedNode as any)[edge] = undefined;\n        })\n\n        const vizNode = {\n            name: node.uid,\n            ...strippedNode,\n            id: node.uid,\n            nodeType,\n            nodeLabel,\n            x: 200 + randomInt(1, 50),\n            y: 150 + randomInt(1, 50),\n        };\n\n        nodeMap.set(node.uid, vizNode);\n    })\n\n    for (const vizNode of (nodeMap.values() as any)) {\n        nodes.push(vizNode)\n    }\n\n    return {\n        nodes, \n        links\n    }\n}\n","import { Node }  from '../CustomTypes'\n\nconst getNodeLabel = (nodeType: string, node: Node) => {\n    console.log('nodetype', nodeType);\n\n    const _node = node as any; // ignore-any\n\n    switch(nodeType) {\n        case \"Process\": return _node.process_name || _node.process_id || 'Process';\n        case \"Asset\": return _node.hostname || 'Asset';\n        case \"File\": return _node.file_path || 'File';\n        case \"IpAddress\": return _node.external_ip || 'IpAddress';\n        case \"Lens\":  return _node.lens || 'Lens';\n        default: return nodeType || '';\n    }\n};\n\nconst mapLabel = (label: string) => {\n    if (label === 'children') {\n        return 'executed'\n    }\n    return label\n};\n\nexport { mapLabel, getNodeLabel }","// @ts-nocheck\nimport React, { useEffect, useRef } from 'react';\nimport { ForceGraph2D } from 'react-force-graph';\nimport * as d3 from \"d3\";\nimport { BKDRHash, riskColor, calcNodeRgb , calcLinkColor} from \"../modules/GraphViz/graphColoring/coloring.tsx\";\nimport { getEngagementEdge, retrieveGraph } from '../modules/GraphViz/graphQL/expandScope.tsx';\nimport { mapLabel } from '../modules/GraphViz/graph/labels.tsx';\nimport { nodeSize } from '../modules/GraphViz/calculations/node/nodeCalcs.tsx'\nimport { calcLinkDirectionalArrowRelPos, calcLinkParticleWidth  } from '../modules/GraphViz/calculations/link/linkCalcs.tsx'\nimport {mergeGraphs} from '../modules/GraphViz/graph/mergeGraphs.tsx'\nimport {graphQLAdjacencyMatrix} from '../modules/GraphViz/graphQL/graphQLAdjacencyMatrix.tsx'\nimport { Node, LinkType, GraphType, ColorHashOptions } from \"../modules/GraphViz/CustomTypes\"\n\ntype ColorHashOptions = {\n    lightness: number,\n    saturation: number,\n    hue: number,\n    hash: BKDRHash,\n}\n\n/**\n * Convert HSL to RGB\n *\n * @see {@link http://zh.wikipedia.org/wiki/HSL和HSV色彩空间} for further information.\n * @param {Number} H Hue ∈ [0, 360)\n * @param {Number} S Saturation ∈ [0, 1]\n * @param {Number} L Lightness ∈ [0, 1]\n * @returns {Array} R, G, B ∈ [0, 255]\n */\nconst HSL2RGB = (H: number, S: number, L: number) => {\n    H /= 360;\n\n    const q = L < 0.5 ? L * (1 + S) : L + S - L * S;\n    const p = 2 * L - q;\n\n    return [H + 1 / 3, H, H - 1 / 3].map((color) => {\n        if (color < 0) {\n            color++;\n        }\n        if (color > 1) {\n            color--;\n        }\n        if (color < 1 / 6) {\n            color = p + (q - p) * 6 * color;\n        } else if (color < 0.5) {\n            color = q;\n        } else if (color < 2 / 3) {\n            color = p + (q - p) * 6 * (2 / 3 - color);\n        } else {\n            color = p;\n        }\n        return Math.round(color * 255);\n    });\n};\n\nconst isArray = (o: Object) => {\n    return Object.prototype.toString.call(o) === '[object Array]';\n};\n\n/**\n * Color Hash Class\n *\n * @class\n */\n\nexport class ColorHash {\n    constructor(options: ColorHashOptions | undefined) {\n        options = options || {};\n\n        const LS = [options.lightness, options.saturation].map((param) => {\n            param = param || [0.35, 0.5, 0.65]; // note that 3 is a prime\n            return isArray(param) ? param.concat() : [param];\n        });\n    \n        this.L = LS[0];\n        this.S = LS[1];\n    \n        if (typeof options.hue === 'number') {\n            options.hue = {min: options.hue, max: options.hue};\n        }\n        if (typeof options.hue === 'object' && !isArray(options.hue)) {\n            options.hue = [options.hue];\n        }\n        if (typeof options.hue === 'undefined') {\n            options.hue = [];\n        }\n        this.hueRanges = options.hue.map(function (range: number) {\n            return {\n                min: typeof range.min === 'undefined' ? 0 : range.min,\n                max: typeof range.max === 'undefined' ? 360 : range.max\n            };\n        });\n    \n        this.hash = options.hash || BKDRHash;\n    } \n    /**\n     * Returns the hash in [h, s, l].\n     * Note that H ∈ [0, 360); S ∈ [0, 1]; L ∈ [0, 1];\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [h, s, l]\n     */\n    hsl = (str: string) => {\n        let H, S, L;\n        let hash = this.hash(str);\n    \n        if (this.hueRanges.length) {\n            const range = this.hueRanges[hash % this.hueRanges.length];\n            const hueResolution = 727; // note that 727 is a prime\n            H = ((hash / this.hueRanges.length) % hueResolution) * (range.max - range.min) / hueResolution + range.min;\n        } else {\n            H = hash % 359; // note that 359 is a prime\n        }\n        hash = parseInt(hash / 360 as any);\n        S = this.S[hash % this.S.length];\n        hash = parseInt(hash / this.S.length as any);\n        L = this.L[hash % this.L.length];\n    \n        return [H, S, L];\n    }\n\n    /**\n     * Returns the hash in [r, g, b].\n     * Note that R, G, B ∈ [0, 255]\n     *\n     * @param {String} str string to hash\n     * @returns {Array} [r, g, b]\n     */\n    rgb = (str: string) => {\n        const hsl = this.hsl(str);\n        return HSL2RGB.apply(this, hsl);\n    };\n}\n\n\nexport const mapNodeProps = (node: Node, f: (string) => void) => {\n    for (const prop in node) {\n        if (Object.prototype.hasOwnProperty.call(node, prop)) {\n            if (Array.isArray(node[prop])) {\n                if (node[prop].length > 0) {\n                    if (node[prop][0].uid === undefined) {\n                        f(prop)\n                    }\n                }\n            } else {\n                f(prop)\n            }\n        }\n    }\n};\n\ntype GraphState = {\n    curLensName: LensType[], \n    graphData: GraphType[]\n}\n\nconst updateGraph = async (\n    lensName: string, \n    state: GraphState, \n    setState: (state: GraphState) => void,\n) => {\n    if (!lensName) {\n        return;\n    }\n\n    await retrieveGraph(lensName)\n        .then(async (scope) => {\n            const update = graphQLAdjacencyMatrix(scope);\n            console.log('update', update);\n            const mergeUpdate = mergeGraphs(state.graphData, update);\n            if (mergeUpdate !== null) {\n                if (state.curLensName === lensName) {\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: mergeUpdate,\n                    })\n                } else {\n                    setState({\n                        ...state,\n                        curLensName: lensName,\n                        graphData: update,\n                    })\n                }\n            }\n        })\n        .catch((e) => console.error(\"Failed to retrieveGraph \", e))\n}\n\ntype GraphDisplayProps = {\n    lensName: string | null,\n    setCurNode: (string) => void,\n}\n\ntype GraphDisplayState = {\n    graphData: AdjacencyMatrix,\n    curLensName: string | null,\n}\n\nconst defaultGraphDisplayState = (lensName: string): GraphDisplayState => {\n    return {\n        graphData: {nodes: [], links: []},\n        curLensName: lensName,\n    }\n}\n\nconst GraphDisplay = ({lensName, setCurNode}: GraphDisplayProps) => {\n    const [state, setState] = React.useState(defaultGraphDisplayState(lensName));\n    const forceRef = useRef(null);\n\n    useEffect(() => {\n        // console.log(\"useEffect - setting forceRef state\");\n        forceRef.current.d3Force(\"link\", d3.forceLink());\n        forceRef.current.d3Force('collide', d3.forceCollide(22));\n        forceRef.current.d3Force(\"charge\", d3.forceManyBody());\n        forceRef.current.d3Force('box', () => {\n            const N = 100;\n            // console.log(Graph.width(), Graph.height())\n            const SQUARE_HALF_SIDE = 20 * N * 0.5;\n            state.graphData.nodes.forEach(node => {\n                const x = node.x || 0, y = node.y || 0;\n                // bounce on box walls\n                if (Math.abs(x) > SQUARE_HALF_SIDE) {\n                    node.vx *= -1;\n                }\n                if (Math.abs(y) > SQUARE_HALF_SIDE) {\n                    node.vy *= -1;\n                }\n            });\n        });\n    }, [state])\n\n\n    useEffect(() => {\n        updateGraph(lensName, state, setState);\n        const interval = setInterval(async () => {\n            if (lensName) {\n                await updateGraph(lensName, state, setState);\n            }\n        }, 1000);\n        return () => clearInterval(interval);\n    }, [lensName, state]);\n\n    const graphData = state.graphData;\n\n    const colorHash = new ColorHash({});\n\n    // #TODO: ADD ZOOM HANDLERS FOR MAX ZOOM IN/OUT\n\n    return (\n        <>\n            <ForceGraph2D\n                graphData={graphData}\n                nodeLabel={(node: Node) => node.nodeLabel}\n                enableNodeDrag={true}\n                linkDirectionalParticles={1}\n                linkDirectionalParticleWidth={(link) => {\n                    return calcLinkParticleWidth(link, graphData);\n                }}\n                linkDirectionalParticleColor={(link) => {\n                    return calcLinkColor(link, graphData)\n                }}\n                linkDirectionalParticleSpeed={0.005}\n                onNodeClick={\n                    (node: Node, event: string) => {\n                        setCurNode(node);\n                    }\n                }\n                linkDirectionalArrowLength={8}\n                linkWidth={4}\n                linkDirectionalArrowRelPos={(link => {\n                    return calcLinkDirectionalArrowRelPos(link, graphData);\n                })}\n                linkCanvasObjectMode={(() => 'after')}\n                linkCanvasObject={((link: LinkType, ctx: any) => {\n                    const MAX_FONT_SIZE = 8;\n                    const LABEL_NODE_MARGIN = 8 * 1.5;\n                    const start = link.source;\n                    const end = link.target;\n                    // ignore unbound links\n                    link.color = calcLinkColor(link, graphData);\n\n                    if (typeof start !== 'object' || typeof end !== 'object') return;\n                    // calculate label positioning\n                    const textPos = Object.assign(\n                        ...['x', 'y'].map((c: any) => (\n                            {\n                                [c]: start[c] + (end[c] - start[c]) / 2 // calc middle point\n                            }\n                        )) as any\n                    );\n\n                    const relLink = {x: end.x - start.x, y: end.y - start.y};\n\n                    const maxTextLength = Math.sqrt(Math.pow(relLink.x, 2) + Math.pow(relLink.y, 2)) - LABEL_NODE_MARGIN * 8;\n\n                    let textAngle = Math.atan2(relLink.y, relLink.x);\n                    // maintain label vertical orientation for legibility\n                    if (textAngle > Math.PI / 2) textAngle = -(Math.PI - textAngle);\n                    if (textAngle < -Math.PI / 2) textAngle = -(-Math.PI - textAngle);\n\n                    const label = mapLabel(link.label);\n                    // estimate fontSize to fit in link length\n                    ctx.font = '50px Arial';\n                    const fontSize = Math.min(MAX_FONT_SIZE, maxTextLength / ctx.measureText(label).width);\n                    ctx.font = `${fontSize + 5}px Arial`;\n\n                    let textWidth = ctx.measureText(label).width;\n\n                    textWidth += Math.round(textWidth * 0.25);\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // draw text label (with background rect)\n                    ctx.save();\n                    ctx.translate(textPos.x, textPos.y);\n                    ctx.rotate(textAngle);\n                    ctx.fillStyle = 'rgb(115,222,255,1)';\n                    ctx.fillRect(-bckgDimensions[0] / 2, -bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'white';\n                    //content, left/right, top/bottom\n                    ctx.fillText(label, .75, 3);\n                    ctx.restore();\n                })}\n                nodeCanvasObject={((node: Node, ctx: any, globalScale: any) => {\n                    // add ring just for highlighted nodes\n\n                    const NODE_R = nodeSize(node, graphData);\n                    ctx.save();\n\n                    // Risk outline color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.3, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = riskColor(node, graphData, colorHash);\n                    ctx.fill();\n                    ctx.restore();\n\n                    ctx.save();\n\n                    // Node color\n                    ctx.beginPath();\n                    ctx.arc(node.x, node.y, NODE_R * 1.2, 0, 2 * Math.PI, false);\n\n                    const nodeRbg = calcNodeRgb(node, colorHash);\n\n                    ctx.fillStyle = `rgba(${nodeRbg[0]}, ${nodeRbg[1]}, ${nodeRbg[2]}, 1)`;\n                    ctx.fill();\n                    ctx.restore();\n\n                    const label = node.nodeLabel;\n\n                    const fontSize = 15 / globalScale;\n\n                    ctx.font = `${fontSize}px Arial`;\n\n\n                    const textWidth = ctx.measureText(label).width;\n\n                    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n                    // node label color\n                    ctx.fillStyle = 'rgba(48, 48, 48, 0.8)';\n                    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n                    ctx.fillStyle = 'white';\n                    ctx.fillText(label, node.x, node.y);\n\n                })}\n                ref={forceRef}\n            />\n        </>\n    )\n}\n\nexport default GraphDisplay;\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { mapEdgeProps } from '../modules/GraphViz/graph/graph_traverse';\nimport {mapNodeProps} from './GraphViz';\nimport {Node} from \"../modules/GraphViz/CustomTypes\"\n\n\nconst useStyles = makeStyles({\n    root: {\n        fontSize: \"1em\"\n    },\n    table: {\n        minWidth: 450,\n    }, \n    tableHeader: {\n        fontSize: \"18px\", \n        color: \"#EAFDFF\", \n    }\n});\n\nfunction innerTable(node: Node, styles: any) {\n    if(node) {\n        return (\n        <TableHead >\n            <TableRow>\n                <TableCell \n                    align=\"left\" \n                    className={styles.tableHeader}>\n                    <b> PROPERTY </b>\n                </TableCell>\n                <TableCell \n                    align=\"left\"\n                    className={styles.tableHeader}\n                >\n                    <b> VALUE </b>\n                </TableCell>\n            </TableRow>\n        </TableHead>\n    )\n    } else {\n        return <></>\n    }\n}\n\ntype NodeTableProps = {\n    node: Node\n}\n\nfunction NodeTable({node}: NodeTableProps){\n    console.log(\"Displaying node: \", node);\n    const classes = useStyles();\n    const hidden = new Set(\n        ['id', 'dgraph.type', '__indexColor', 'risks','uid', 'scope', 'name', 'nodeType', 'nodeLabel', 'x', 'y', 'index', 'vy', 'vx', 'fx', 'fy']\n    );\n\n    mapEdgeProps(node, (edgeName: string, _neighbor: Node) => {\n        hidden.add(edgeName)\n    });\n\n    const displayNode = {} as any;\n\n    mapNodeProps(\n        node, \n        (propName: string) => {\n            const prop = (node as any)[propName];\n\n            if(!hidden.has(propName)){\n                if (prop) {\n                    if (propName.includes('_time')) {\n                        displayNode[propName] = new Date(prop).toLocaleString()\n                    } else {\n                        displayNode[propName] = prop;\n                    }\n                }\n            }           \n        }\n    )\n\n        return(\n            <TableContainer>\n                <Table className={classes.table}>\n                {\n                    innerTable(node, classes)\n                }\n                <TableBody>\n                        {\n                            Object.entries(displayNode).map((entry) => {\n                                const [key, value] = entry;\n                                \n                                return(\n                                    <TableRow>\n                                        <TableCell align=\"left\"><b>{key}</b></TableCell>\n                                        <TableCell align=\"left\">{value as any}</TableCell>\n                                    </TableRow>\n                                ) \n                            })\n                        }\n                </TableBody>\n                </Table>\n            </TableContainer>\n        ) || \"no no\"\n        \n    \n}\n\n\nexport default  NodeTable ","import React, {useEffect, useState} from \"react\";\nimport NodeTable from './NodeTable'\nimport Button from \"@material-ui/core/Button\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport LensIcon from '@material-ui/icons/Lens';\nimport Divider from \"@material-ui/core/Divider\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {mapEdgeProps} from '../modules/GraphViz/graph/graph_traverse'; \nimport {Node, Lens} from \"../modules/GraphViz/CustomTypes\";\nimport {getGraphQlEdge} from \"../modules/GraphViz/engagement_edge/getEngagementEdge\";\n\nconst useStyles = makeStyles({\n    root:{\n        fontSize: \"1rem\",\n    },\n    button: {\n        width: \".005%\",\n        color: \"white\",\n        backgroundColor:\"#424242\",\n    },\n    title: {\n        fontSize: \"25px\",\n        color: \"#ffffff\",\n    },\n    icon:{\n        color: \"#42C6FF\",\n        margin: \"15px 0 0 10px\",\n    }, \n    expand:{\n        color: \"#42C6FF\",\n        margin: \"0px\"\n    },\n    header:{\n        display: \"flex\"\n    }, \n    table: {\n        minWidth: 450\n    },\n});\n\ntype SelectLensProps = {\n    lens: string,\n    score: number,\n    uid: number,\n    setLens: (lens: string) => void,\n}\n\nfunction SelectLens(props: SelectLensProps) {\n    // lensRows.push(createData(props.setLens(props.lens) ))\n    return (\n        <>\n                <TableRow key={props.lens}>\n                        <TableCell component=\"th\" scope=\"row\">\n                        <Button \n                            onClick={\n                                () => { \n                                    props.setLens(props.lens)    \n                                }\n                        }>\n                            {props.lens + \"\\t\\t\" + props.score}\n                        </Button>\n                        </TableCell>\n                    </TableRow>\n        </>\n    )\n}\n\n\ntype ToggleLensTableProps = {\n    setLens: (lens: string) => void,\n}\n\ntype ToggleLensTableState = {\n    toggled: boolean,\n    lenses: Lens[],\n}\n\nconst defaultToggleLensTableState = (): ToggleLensTableState => {\n    return {\n        toggled: true,\n        lenses: [],\n    }\n}\n\nfunction ToggleLensTable({setLens}: ToggleLensTableProps) {\n    const [state, setState] = useState(defaultToggleLensTableState());\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            console.log(\"Fetching lenses\");\n            getLenses()\n                .then((response) => {\n                    if (response.lenses && response.lenses !== state.lenses) {\n                        setState({\n                            ...state,\n                            lenses: response.lenses || [],\n                        })\n                    }\n                })\n        }, 1000);\n        return () => clearInterval(interval);\n    });\n\n\n    return (\n        <>\n            <div className={classes.header}>\n                <b className={classes.title}>\n                    <BubbleChartIcon className = {classes.icon} />\n                    LENSES \n                </b>\n                <Button\n                    className = {classes.button}\n                    onClick={() => { \n                        setState({\n                            ...state,\n                            toggled: !state.toggled,\n                        }) \n                    }}> \n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"lensToggle\">\n                {state.toggled && state.lenses &&\n                    state.lenses.map(\n                        (lens: Lens) => {\n                            // lensRows.push(lens);\n                            return(\n                                <TableContainer>\n                                    <Table className={classes.table} aria-label=\"lens table\">\n                                        <TableBody>\n                                            <SelectLens \n                                                key={Number(lens.uid)}\n                                                uid={lens.uid}\n                                                lens={lens.lens_name}\n                                                score={lens.score}\n                                                setLens={setLens}\n                                            />\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            )\n                        }\n                    )\n                }\n            </div>\n            \n            <Divider />\n        </>\n    )\n}\n\n// const engagement_edge = getEngagementEdge();\nconst graphql_edge = getGraphQlEdge();\n\n\nconst getLenses = async () => {\n    console.log('fetching graph from', graphql_edge);\n\n    const query = `\n    {\n        lenses {\n            uid,\n            node_key,\n            lens_name,\n            score, \n            lens_type,\n        }\n    }\n    `;\n    console.log('connecting to: ' + `${graphql_edge}graphql`)\n    const res = await fetch(`${graphql_edge}graphql`,\n        {\n            method: 'post',\n            body: JSON.stringify({ query: query }),\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            credentials: 'include',\n        })\n        .then(res => res.json())\n        .then(res => {\n            if (res.errors) {\n                console.error(\"lenses failed\", res.errors);\n                res.data = {lenses: []};\n            }\n            return res\n        })\n        .then((res) => res.data);\n\n        const jres = await res;\n\n    return jres;\n};\n\ntype NodeDetailsProps = {\n    node: Node\n}\n\nconst NodeDetails = ({node}: NodeDetailsProps) => {\n    // #TODO: Remove hidden fields from our node before displaying\n    // Display remaining fields of node in our component=\"div\"\n\n    return (\n        <>\n            <NodeTable node={node} />\n        </>\n    )\n}\n\ntype ToggleNodeTableProps = {\n    curNode: Node | null\n}\n\nfunction ToggleNodeTable({curNode}: ToggleNodeTableProps) {\n    const [toggled, toggle] = useState(true);\n    const classes = useStyles();\n    return (\n        <>\n        <div>\n            <div className={classes.header}>\n                <b className={classes.title}><LensIcon className={classes.icon}/> NODE</b>\n                <Button\n                    className = {classes.button}\n                    onClick={\n                        () => { toggle(toggled => !toggled) }\n                    }> \t\n                    <ExpandMoreIcon className={classes.expand}/> \n                </Button>\n            </div>\n\n            <div className=\"nodeToggle\">\n                {\n                    toggled && curNode && \n                        <>\n                            { <NodeDetails node={curNode}/> }\n                        </>\n                }\n            </div>\n        </div>\n        </>\n    )\n}\n\n\ntype SideBarContentProps = {\n    setLens: (lens: string) => void, \n    curNode: Node | null\n}\n\nexport default function SideBarContent({setLens, curNode}: SideBarContentProps) {\n    return (\n        <>\n            <ToggleLensTable setLens={setLens}/>\n            <ToggleNodeTable curNode={curNode}/>\n        </>\n    );\n}\n\n","import GraphDisplay from \"./GraphViz\";\nimport React from \"react\";\nimport SideBarContent from './SideBarContent'\nimport clsx from \"clsx\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport Button from \"@material-ui/core/Button\";\nimport { Node, Lens } from \"../modules/GraphViz/CustomTypes\";\n\nconst drawerWidth = 500;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create([\"margin\", \"width\"], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      color: \"#42C6FF\"\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    drawerHeader: {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: \"flex-end\"\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      marginLeft: -drawerWidth\n    },\n    contentShift: {\n      transition: theme.transitions.create(\"margin\", {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen\n      }),\n      marginLeft: 0,\n    },\n    lensName:{\n      color:\"#EAFDFF\",\n      fontSize: \"2rem\", \n      margin: \"10px 15px 0px 0px\"\n    },\n    header:{\n      fontSize: \"35px\"\n    }, \n    close:{\n      color:\"#42C6FF\",\n    }\n  })\n);\n\ntype SideBarProps = {\n  setLens: (lens: string) => void,\n  curLens: string,\n  curNode: Node | null,\n}\n\nexport default function SideBar({setLens, curLens, curNode}: SideBarProps) {\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(true);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      {/* <CssBaseline /> */}\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            {/* // Menu Icon  */}\n            &#9776;\n          </IconButton>\n          <Typography \n            variant=\"h5\" \n            noWrap\n          >\n            <b className={classes.header}> GRAPL</b>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Button onClick={handleDrawerClose}><KeyboardArrowLeftIcon className={classes.close}/></Button>\n        </div>\n\n        <Divider />\n\n        <SideBarContent \n        setLens={setLens} \n        curNode={curNode}\n      />\n\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open\n        })}\n      >\n        <div className={ classes.drawerHeader } />\n      <h3 className={ classes.lensName }>\n        {/* selected lens name */}\n        {curLens || \"\"} \n      </h3>\n\n        <Typography paragraph></Typography>\n      </main>\n    </div>\n  );\n}\n\ntype EngagementUxState = {\n  curLens: string, \n  curNode: Node | null \n}\n\nconst defaultEngagementUxState = (): EngagementUxState => {\n  return {\n    curLens: \"\",\n    curNode: null,\n  }\n}\n\nexport const EngagementUx = () => {\n    \n    const [state, setState] = React.useState(defaultEngagementUxState());\n    \n    console.log('EngagementUX: curLens, ', state.curLens);\n\n    return (\n        <>\n            <SideBar \n                setLens={\n                    (lens: string) => setState({\n                        ...state,\n                        curLens: lens,\n                    })\n                }\n                curLens={state.curLens}\n                curNode={state.curNode}\n            />\n\n            <GraphDisplay \n                lensName={state.curLens} \n                setCurNode={(node: Node) => {\n                    setState({\n                        ...state,\n                        curNode: node,\n                    })\n                }}\n            />\n        </>\n    )\n}","import React, {useEffect} from 'react';\nimport './LogIn.css';\nimport {checkLogin, LogIn} from './Login';\nimport {EngagementUx} from \"./components/SideBar\";\nimport { RouteState, SetRouteState } from '../src/modules/GraphViz/CustomTypes'\n\nconsole.log(\"App loading\");\n\n// Updates our react state, as well as localStorage state, to reflect the page\n// we should render\n\nconst redirectTo = (\n    routeState: RouteState, \n    setRouteState: SetRouteState, \n    page_name: string\n    ) => {\n    setRouteState({\n        ...routeState,\n        curPage: page_name,\n    })\n    localStorage.setItem(\"grapl_curPage\", page_name)\n}\n\nconst defaultRouteState = (): RouteState => {\n    return {\n        curPage: localStorage.getItem(\"grapl_curPage\") || \"login\",\n        lastCheckLoginCheck: Date.now(),\n    }\n}\n\nconst Router = () => {\n    // By default, load either the last page we were on, or the login page\n    // if there is no last page\n    const [routeState, setRouteState] = React.useState(defaultRouteState())\n\n    useEffect(() => {\n        if (routeState.curPage !== \"login\") {\n            if (Date.now() - routeState.lastCheckLoginCheck > 1000) {\n                checkLogin()\n                    .then((loggedIn) => {\n                        console.log('Not logged in, redirecting.');\n                        if (!loggedIn && routeState.curPage !== \"login\") {\n                            redirectTo(routeState, setRouteState, \"login\")\n                        }\n                    })\n            }}\n    });\n\n    if (routeState.curPage === \"login\") {\n        console.log(\"routing to engagement_ux page\");\n        return (\n            <LogIn loginSuccess={\n                () => redirectTo(routeState, setRouteState, \"engagement_ux\")\n            }></LogIn>\n        )\n    }\n\n    if (routeState.curPage === \"engagement_ux\") {\n        console.log(\"routing to login page\");\n        return <EngagementUx/>\n    }\n\n    // #TODO: This should be a nice landing page explaining that something has gone\n    // wrong, and give a redirect back to the login page\n    console.warn(\"Invalid Page State\");\n    return <div>Invalid Page State</div>\n    // <PageNotFound />\n}\n\n\nexport default function App() {\n    console.log(\"App loaded\");\n    return (\n        <>\n            <Router/>\n        </>\n    )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst darkTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        primary: {\n            main: '#373740',\n        }\n    }\n})\n\nconst rootElement = document.getElementById('root')\n\nReactDOM.render(\n    <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n        <App />, \n    </ThemeProvider>\n    </React.StrictMode>\n    ,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}